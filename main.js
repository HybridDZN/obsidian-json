/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => JsonEditorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  filePath: ""
};
var VIEW_TYPE_JSON_EDITOR = "json-editor-view";
var JsonEditorPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerView(VIEW_TYPE_JSON_EDITOR, (leaf) => {
      const view = new JsonEditorView(leaf, this);
      return view;
    });
    this.addRibbonIcon("file", "Open JSON Editor", async () => {
      this.activateView();
    });
    this.addSettingTab(new JsonEditorSettingTab(this.app, this));
  }
  onunload() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_JSON_EDITOR);
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_JSON_EDITOR);
    await this.app.workspace.getLeaf(true).setViewState({
      type: VIEW_TYPE_JSON_EDITOR,
      active: true
    });
    this.app.workspace.revealLeaf(
      this.app.workspace.getLeavesOfType(VIEW_TYPE_JSON_EDITOR)[0]
    );
  }
};
var JsonEditorView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.jsonData = null;
    this.filePath = "";
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_JSON_EDITOR;
  }
  getDisplayText() {
    return "JSON Editor";
  }
  async onOpen() {
    const { contentEl } = this;
    const fileButton = contentEl.createEl("button", {
      text: "Open JSON File"
    });
    fileButton.onclick = async () => {
      if (!("showOpenFilePicker" in window)) {
        new import_obsidian.Notice("File picker not supported in this browser.");
        return;
      }
      const fileHandle = await window.showOpenFilePicker();
      if (fileHandle && fileHandle.length > 0) {
        const file = await fileHandle[0].getFile();
        this.filePath = file.name;
        const fileContent = await file.text();
        try {
          this.jsonData = JSON.parse(fileContent);
          new import_obsidian.Notice("File loaded successfully!");
          this.displayEditor();
        } catch (e) {
          new import_obsidian.Notice("Invalid JSON file.");
        }
      }
    };
  }
  displayEditor() {
    const { contentEl } = this;
    contentEl.empty();
    const createFields = (data, parentEl) => {
      const sortedKeys = Object.keys(data).sort();
      sortedKeys.forEach((key) => {
        const value = data[key];
        if (typeof value === "object" && value !== null) {
          const details = parentEl.createEl("details");
          const summary = details.createEl("summary", { text: key });
          createFields(value, details);
        } else {
          new import_obsidian.Setting(parentEl).setName(key).addText(
            (text) => text.setValue(String(value)).onChange((newValue) => {
              data[key] = newValue;
            })
          );
        }
      });
    };
    if (this.jsonData && typeof this.jsonData === "object") {
      createFields(this.jsonData, contentEl);
      new import_obsidian.Notice("JSON data displayed successfully!");
    } else {
      new import_obsidian.Notice("No valid JSON data to display.");
    }
    const saveButton = contentEl.createEl("button", {
      text: "Save Changes"
    });
    saveButton.onclick = async () => {
      const confirmSave = confirm(
        "Are you sure you wish to save changes?"
      );
      if (confirmSave) {
        try {
          if (!("showSaveFilePicker" in window)) {
            new import_obsidian.Notice(
              "Save file picker not supported in this browser."
            );
            return;
          }
          const newFileHandle = await window.showSaveFilePicker({
            suggestedName: this.filePath,
            types: [
              {
                description: "JSON Files",
                accept: { "application/json": [".json"] }
              }
            ]
          });
          const writable = await newFileHandle.createWritable();
          await writable.write(
            new Blob([JSON.stringify(this.jsonData, null, 2)], {
              type: "application/json"
            })
          );
          await writable.close();
          new import_obsidian.Notice("File saved successfully!");
        } catch (e) {
          console.error("Error saving file:", e);
          new import_obsidian.Notice("Failed to save the file.");
        }
      }
    };
  }
  async onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var JsonEditorSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Default JSON File Path").setDesc("Set the default path for JSON files").addText(
      (text) => text.setPlaceholder("Enter the file path").setValue(this.plugin.settings.filePath).onChange(async (value) => {
        this.plugin.settings.filePath = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
